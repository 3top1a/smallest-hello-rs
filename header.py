import struct

with open('hello', 'rb+') as file:
    data = bytearray(file.read())

    # Calculate the entry point offset
    file.seek(0x18)
    entry_point_offset: int = struct.unpack('B', file.read1(1))[0]
    print(
        f"Entry point is at byte {entry_point_offset} ({hex(entry_point_offset)})")

    file.seek(entry_point_offset)
    bytes_after_entry_point: bytes = file.read1(len(data))

    # Clear the existing ELF header
    file.seek(0)
    file.truncate()

    data = bytes([
        0x7F, 0x45, 0x4C, 0x46, # Header
        0x02, # 64bit
        0x01, # LE
        0x01, # Version
        0x00, # SystemV
        0x00, # ABI
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # e_ident
        0x02, 0x00, # e_type, executable
        0x3E, 0x00, # AMD x86-64
        0x01, # e_version, always one
        0x00, 0x00, 0x00, 0xB0 - 32, # entry point, by default B0
        0x00, 0x40, 0x00, 0x00, # e_phoff
        0x00, 0x00, 0x00, 0x40, # e_shoff
        0x00, 0x00, 0x00, 0x00, # e_flags
        0x00, 0x00, # e_ehsize
        0x00, 0x00, # e_phentsize
        0x00, 0x00, # e_phnum
        0x00, 0x00, # e_shentsize
        0x00, 0x00, # e_shnum
        0x00, 0x00,  # e_shstrndx
        0x00, 0x00, 0x00, 0x40,
        0x00, 0x38, 0x00, 0x02,
        0x00, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xB0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0xE5, 0x74, 0x64, 0x06, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        #0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        #0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ])

    file.write(data)
    file.write(bytes_after_entry_point)
